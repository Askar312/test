# Находим минимальное положительное целое число, которого нет в списке.
# Если список содержит только отрицательные числа, верните 1.
# Все элементы являются целыми числами:
# Пример: [1,2,3,4,6] - Ответ 5
# Пример: [1,2,3] - Ответ 4
# Пример: [-1, -2, -6] - Ответ 1

# def num(arr):
#     distinct = {*arr}
#     index = 1
#     while True:
#         if index not in distinct:
#             return index
#         index += 1
# if __name__ == '__main__':
#     n = [1,2,3,4,6]
#     n1 = [1,2,3]
#     n2 = [-1, -2, -6]
#     print("Самое максимальное положительное число",num(n))
#     print("Следуюшие число", num(n1))
#     print("Самое маленькое отрицательное число", num(n2))
# """
# Попросить пользователя ввести текст. В результате вывести процент букв
# в верхнем регистре (заглавные) и в нижнем регистре (прописные).
# """

# def string_test(s):
#     d={"UP":0, "LOW":0}
#     for c in s:
#         if c.isupper():
#            d["UP"]+=1
#         elif c.islower():
#            d["LOW"]+=1
#         else:
#            pass
#     print ("Ваше слово : ", s)
#     a = (d['UP'] +d['LOW'])
#     uper = d['UP']/a*100
#     lower = d['LOW']/a*100
#
#     print ("Количество Букв с большой буквой : ", uper, '%')
#     print ("Количество Букв с маленькой буквой : ", lower, '%')
# string_test(input('Введите слово:'))

# """
# "Аналог шифра цезаря ". Программа должна запрашивать элементы списка через пробел.
# После чего пользователь должен ввести значение для сдвига элементов списка.
# Значение может быть как положительным, так и отрицательным. Если значение положительное,
# элементы списка должны сдвигаться вправо, если отрицательное - влево. Результат необходимо вывести на экран:
# Введенные данные: [5,7,9,10,2], 2
# Результат:        [9,10,2,5,7]
# """


# lst = [5,7,9,10,2] # Начальный список
# steps = 2 # Количество позиций для сдвига
# lst = lst[steps:] + lst[:steps]
# print(lst)



# """
# "Напишите функцию которая принимает в себя словарь где ключи это номера а значения страны. Попросите пользователя ввести страну или ключ и выдайте ему результат."
# d = {'1': 'kyrgyzstan', '2': 'kazahstan'}
# """
# d = str(input("Напиши 1 или 2:"))
# p = {'1': 'kyrgyzstan', '2': 'kazahstan'}
# print(p[d])


# """

# 'С помощью lambda выведите числа фибоначи'
# """
# from functools import reduce
#
# fib = lambda n: reduce(lambda x, _: x + [x[-1] + x[-2]],
#                        range(n - 2), [0, 1])
#
# print(fib(10))
# """
# 'С помощью рекурсии выведите факториал'
# """


# def fac(n):
#     if n == 0:
#         return 1
#     return fac(n - 1) * n
#
#
# print(fac(3))

# """
# 'С помощью рекурсии выполните перевод числа в двоичную систему счисления'
# "10 - 1010"
# "12 - 1100"
# "3 - 11"
# "15 - 1111""
# # """
# l = []
# def convert(b):
#     if (b == 0):
#         return l
#     dig = b % 2
#     l.append(dig)
#     convert(b // 2)
# a = int(input("Введи число для получение в двоичном коде"))
# convert(a)
# l.reverse()
# for i in l:
#     print(i)
# """
# 'Найдите длину списка при помощи рекурсии'
# def length(lst):
#     if not lst:
#         return 0
#     return 1 + length(lst[1:])
# a = str(input("Введите слова"))
# print("Длина списка равна: ")
# print(length(a))
# # """